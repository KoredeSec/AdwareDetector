package com.example.adwaredetector;

import android.content.Context;
import ai.onnxruntime.*;

import java.io.InputStream;
import java.nio.FloatBuffer;
import java.util.Collections;

public class MalwareDetector {
    private static final int REQUIRED_FEATURE_COUNT = 8;  // Updated to 8 features

    private final OrtEnvironment env;
    private final OrtSession session;

    public MalwareDetector(Context context) throws Exception {
        env = OrtEnvironment.getEnvironment();

        try (InputStream is = context.getAssets().open("lightgbm_model.onnx")) {
            byte[] modelBytes = new byte[is.available()];
            int readBytes = is.read(modelBytes);
            if (readBytes != modelBytes.length) {
                throw new RuntimeException("Failed to read full model file");
            }
            session = env.createSession(modelBytes);
        }
    }

    public float predict(float[] inputFeatures) throws Exception {
        if (inputFeatures.length != REQUIRED_FEATURE_COUNT) {
            throw new IllegalArgumentException("Invalid input feature count. Expected: " +
                    REQUIRED_FEATURE_COUNT + ", but got: " + inputFeatures.length);
        }

        try (OnnxTensor tensor = OnnxTensor.createTensor(
                env,
                FloatBuffer.wrap(inputFeatures),
                new long[]{1, REQUIRED_FEATURE_COUNT})
        ) {
            OrtSession.Result result = session.run(Collections.singletonMap(
                    session.getInputNames().iterator().next(),
                    tensor
            ));

            Object value = result.get(0).getValue();

            if (value instanceof float[][]) {
                return ((float[][]) value)[0][0];
            } else if (value instanceof long[]) {
                return ((long[]) value)[0];
            } else if (value instanceof float[]) {
                return ((float[]) value)[0];
            } else {
                throw new IllegalStateException("Unexpected output type: " + value.getClass().getName());
            }
        }
    }
}
